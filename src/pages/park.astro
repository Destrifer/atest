---
// Импорт коллекции и извлечение данных о машинах
import { getCollection } from "astro:content";
const cars = await getCollection("apiCars");
import Layout from "../layouts/Layout.astro";
import CarCard from "@components/CarCard.astro";
const title = "Условия аренды автомобиля"; // Заголовок для этой страницы
---

<Layout title={title}>
	<div class="container mx-auto">
		<!-- Фильтр по классам авто с кнопками -->
		<div class="filter-section m-4 flex flex-wrap gap-2 justify-center">
			<button class="tab-button" data-id="1">Комфорт класс</button>
			<button class="tab-button" data-id="2">Бизнес</button>
			<!-- Убрана кнопка с data-id="3" -->
			<button class="tab-button" data-id="4">Кроссоверы</button>
			<button class="tab-button" data-id="5">Люкс</button>
			<button class="tab-button" data-id="6">Внедорожники</button>
			<button class="tab-button" data-id="7">Минивены</button>
		</div>

		<!-- Контейнер для карточек и сообщения -->
		<div class="cars-grid p-4" id="cars-container">
			{
				cars.length > 0 ? (
					// Фильтруем автомобили, исключая те, у которых class_id равен 3
					cars
						.filter((car) => car.data.class_id !== 3)
						.map((car) => <CarCard car={car} data-id={car.data.class_id} />)
				) : (
					<p class="mx-4">Машин больше нет</p>
				)
			}
		</div>
		<p id="no-cars-message" style="display: none;" class="mx-4">
			Машин выбранного класса нет
		</p>
	</div>
</Layout>

<!-- Добавляем стили -->
<style>
	.cars-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 16px;
	}
	.tab-button {
		padding: 10px 20px;
		color: black;
		background-color: yellow;
		text-decoration: none;
		border-radius: 8px;
		border: 3px solid black;
		transition: background-color 0.6s;
		text-transform: uppercase;
		font-weight: bolder;
		margin-top: 5px;
	}
	.tab-button:hover {
		background-color: #e60000;
		color: white;
	}
	/* Стили для активного таба */
	.tab-button.active {
		background-color: #e60000;
		color: white;
	}
</style>

<!-- Добавляем скрипт для фильтрации и обработки URL параметров -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const filterButtons = document.querySelectorAll(".tab-button");
		const carsContainer = document.getElementById("cars-container");
		const cars = Array.from(carsContainer.children);
		const noCarsMessage = document.getElementById("no-cars-message");
		let selectedClasses = [];

		// Функция для фильтрации карточек
		function filterCars() {
			let visibleCars = 0;
			cars.forEach((car) => {
				const carClassId = car.getAttribute("data-id");

				if (
					selectedClasses.length === 0 ||
					selectedClasses.includes(carClassId)
				) {
					(car as HTMLElement).style.display = "flex";
					visibleCars++;
				} else {
					(car as HTMLElement).style.display = "none";
				}
			});

			// Показываем/скрываем сообщение
			noCarsMessage.style.display = visibleCars === 0 ? "block" : "none";
		}

		// Считываем параметр class из URL
		const urlParams = new URLSearchParams(window.location.search);
		const initialClass = urlParams.get("class");

		// Если есть параметр class, активируем соответствующую кнопку и фильтруем
		if (initialClass) {
			selectedClasses.push(initialClass);
			filterButtons.forEach((button) => {
				if (button.getAttribute("data-id") === initialClass) {
					button.classList.add("active");
				}
			});
			filterCars();
		}

		// Добавляем обработчик клика для кнопок фильтров
		filterButtons.forEach((button) => {
			button.addEventListener("click", function () {
				const classId = this.getAttribute("data-id");

				// Добавляем или удаляем класс из выбранных
				if (selectedClasses.includes(classId)) {
					selectedClasses = selectedClasses.filter((id) => id !== classId);
					this.classList.remove("active");
				} else {
					selectedClasses.push(classId);
					this.classList.add("active");
				}

				filterCars();
			});
		});
	});
</script>
