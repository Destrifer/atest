---
import Layout from "../layouts/Layout.astro";
import CarCard from "@components/CarCard.astro";
import { formatDateForAPI } from "../utils/utils";

// Извлекаем параметры из запроса
const { request } = Astro;
const url = new URL(request.url);

const fromId = url.searchParams.get("from-id") || "10";
const toId = url.searchParams.get("to-id") || "10";
const fromDate = formatDateForAPI(
	url.searchParams.get("from-date") || "2024-12-20",
);
const toDate = formatDateForAPI(
	url.searchParams.get("to-date") || "2024-12-28",
);
const promocode = url.searchParams.get("promocode") || "";

// Запрашиваем данные от API
const apiUrl = `https://new.mycarrental.ru/api/v2/search_cars?from-id=${fromId}&to-id=${toId}&from-date=${fromDate}&to-date=${toDate}&from-time=12%3A00&to-time=12%3A00&promocode=${promocode}`;
const response = await fetch(apiUrl);

if (!response.ok) {
	throw new Error("Не удалось загрузить данные автомобилей.");
}

// Данные автомобилей
const data = await response.json();
const cars = data.vehicles || [];

// Перечень классов автомобилей
const carClasses = [
	{ id: "1", name: "Комфорт класс" },
	{ id: "2", name: "Бизнес" },
	{ id: "4", name: "Кроссоверы" },
	{ id: "6", name: "Внедорожники" },
	{ id: "7", name: "Минивены" },
];

// SEO
const h1 = "Прокат авто в Крыму без водителя";
const title =
	"Парк авто - аренда авто без водителя | Аренда авто в Крыму Car on Time";
const description =
	"Парк авто - аренда авто без водителя | Взять напрокат автомобиль, Крым компания CAR ON TIME. Аренда - это удобный вариант передвижения по Крыму.";
---

<Layout title={title} description={description} h1={h1}>
	<div class="container mx-auto">
		<!-- Фильтр по классам авто -->
		<div class="filter-section m-4 flex flex-wrap gap-2 justify-center">
			{
				carClasses.map((carClass) => (
					<button class="tab-button" data-id={carClass.id}>
						{carClass.name}
					</button>
				))
			}
		</div>

		<!-- Карточки автомобилей -->
		<div class="cars-grid p-4" id="cars-container">
			{
				cars.length > 0 ? (
					cars
						.filter((car) => car.class_id !== 3 && car.class_id !== 5) // Исключаем определённые классы
						.map((car) => (
							<CarCard
								car={{
									id: car.id,
									model: car.model,
									year: car.year,
									rate_per_day: car.rate_per_day,
									deposit: car.deposit,
									images: car.images,
									color: car.color,
									transmission: car.transmission,
									seats: car.seats,
									engine_capacity: car.engine_capacity,
									class_id: car.class_id,
									rent_period_days: car.rent_period_days,
								}}
								fromId={fromId}
								toId={toId}
								fromDate={fromDate}
								toDate={toDate}
								promocode={promocode}
								data-id={car.class_id}
							/>
						))
				) : (
					<p class="mx-4">Машин по вашему запросу нет.</p>
				)
			}
		</div>

		<p id="no-cars-message" style="display: none;" class="mx-4">
			Машин выбранного класса нет
		</p>
	</div>
</Layout>

<style>
	.cars-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 16px;
	}
	.tab-button {
		padding: 10px 20px;
		color: white;
		background-color: #1e2933;
		text-decoration: none;
		border-radius: 8px;
		transition: background-color 0.6s;
		text-transform: uppercase;
		font-weight: bolder;
		margin-top: 5px;
	}
	.tab-button:hover {
		background-color: #dc2626;
		color: white;
		cursor: pointer;
	}
	.tab-button.active {
		background-color: #dc2626;
		color: white;
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const filterButtons = document.querySelectorAll(".tab-button");
		const carsContainer = document.getElementById("cars-container");
		const cars = Array.from(carsContainer.children);
		const noCarsMessage = document.getElementById("no-cars-message");
		let selectedClasses = [];

		// Функция для фильтрации карточек
		function filterCars() {
			let visibleCars = 0;
			cars.forEach((car) => {
				const carClassId = car.getAttribute("data-id");

				if (
					selectedClasses.length === 0 ||
					selectedClasses.includes(carClassId)
				) {
					car.style.display = "flex";
					visibleCars++;
				} else {
					car.style.display = "none";
				}
			});

			noCarsMessage.style.display = visibleCars === 0 ? "block" : "none";
		}

		// Обработчики клика по кнопкам
		filterButtons.forEach((button) => {
			button.addEventListener("click", function () {
				const classId = this.getAttribute("data-id");

				if (selectedClasses.includes(classId)) {
					selectedClasses = selectedClasses.filter((id) => id !== classId);
					this.classList.remove("active");
				} else {
					selectedClasses.push(classId);
					this.classList.add("active");
				}

				filterCars();
			});
		});
	});
</script>
